// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package domain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiftSessionServiceClient is the client API for LiftSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiftSessionServiceClient interface {
	AddSession(ctx context.Context, in *AddSessionRequest, opts ...grpc.CallOption) (*AddSessionResponse, error)
	AddLift(ctx context.Context, in *AddLiftRequest, opts ...grpc.CallOption) (*AddLiftResponse, error)
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	ListSessionsByUser(ctx context.Context, in *ListSessionsByUserRequest, opts ...grpc.CallOption) (*ListSessionByUserResponse, error)
}

type liftSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiftSessionServiceClient(cc grpc.ClientConnInterface) LiftSessionServiceClient {
	return &liftSessionServiceClient{cc}
}

func (c *liftSessionServiceClient) AddSession(ctx context.Context, in *AddSessionRequest, opts ...grpc.CallOption) (*AddSessionResponse, error) {
	out := new(AddSessionResponse)
	err := c.cc.Invoke(ctx, "/LiftSessionService/addSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liftSessionServiceClient) AddLift(ctx context.Context, in *AddLiftRequest, opts ...grpc.CallOption) (*AddLiftResponse, error) {
	out := new(AddLiftResponse)
	err := c.cc.Invoke(ctx, "/LiftSessionService/addLift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liftSessionServiceClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, "/LiftSessionService/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liftSessionServiceClient) ListSessionsByUser(ctx context.Context, in *ListSessionsByUserRequest, opts ...grpc.CallOption) (*ListSessionByUserResponse, error) {
	out := new(ListSessionByUserResponse)
	err := c.cc.Invoke(ctx, "/LiftSessionService/ListSessionsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiftSessionServiceServer is the server API for LiftSessionService service.
// All implementations must embed UnimplementedLiftSessionServiceServer
// for forward compatibility
type LiftSessionServiceServer interface {
	AddSession(context.Context, *AddSessionRequest) (*AddSessionResponse, error)
	AddLift(context.Context, *AddLiftRequest) (*AddLiftResponse, error)
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	ListSessionsByUser(context.Context, *ListSessionsByUserRequest) (*ListSessionByUserResponse, error)
	mustEmbedUnimplementedLiftSessionServiceServer()
}

// UnimplementedLiftSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiftSessionServiceServer struct {
}

func (UnimplementedLiftSessionServiceServer) AddSession(context.Context, *AddSessionRequest) (*AddSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSession not implemented")
}
func (UnimplementedLiftSessionServiceServer) AddLift(context.Context, *AddLiftRequest) (*AddLiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLift not implemented")
}
func (UnimplementedLiftSessionServiceServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedLiftSessionServiceServer) ListSessionsByUser(context.Context, *ListSessionsByUserRequest) (*ListSessionByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessionsByUser not implemented")
}
func (UnimplementedLiftSessionServiceServer) mustEmbedUnimplementedLiftSessionServiceServer() {}

// UnsafeLiftSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiftSessionServiceServer will
// result in compilation errors.
type UnsafeLiftSessionServiceServer interface {
	mustEmbedUnimplementedLiftSessionServiceServer()
}

func RegisterLiftSessionServiceServer(s grpc.ServiceRegistrar, srv LiftSessionServiceServer) {
	s.RegisterService(&LiftSessionService_ServiceDesc, srv)
}

func _LiftSessionService_AddSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiftSessionServiceServer).AddSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LiftSessionService/addSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiftSessionServiceServer).AddSession(ctx, req.(*AddSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiftSessionService_AddLift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiftSessionServiceServer).AddLift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LiftSessionService/addLift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiftSessionServiceServer).AddLift(ctx, req.(*AddLiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiftSessionService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiftSessionServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LiftSessionService/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiftSessionServiceServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiftSessionService_ListSessionsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiftSessionServiceServer).ListSessionsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LiftSessionService/ListSessionsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiftSessionServiceServer).ListSessionsByUser(ctx, req.(*ListSessionsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiftSessionService_ServiceDesc is the grpc.ServiceDesc for LiftSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiftSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LiftSessionService",
	HandlerType: (*LiftSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addSession",
			Handler:    _LiftSessionService_AddSession_Handler,
		},
		{
			MethodName: "addLift",
			Handler:    _LiftSessionService_AddLift_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _LiftSessionService_GetSession_Handler,
		},
		{
			MethodName: "ListSessionsByUser",
			Handler:    _LiftSessionService_ListSessionsByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "API/session.proto",
}
